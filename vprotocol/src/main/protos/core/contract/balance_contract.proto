syntax = "proto3";

package protocol;

option java_package = "org.vision.protos.contract"; //Specify the name of the package that generated the Java file
//option java_outer_classname = "FreezeBalanceContract"; //Specify the class name of the generated Java file

import "core/contract/common.proto";

message FreezeBalanceContract {
  bytes owner_address = 1;
  int64 frozen_balance = 2;
  int64 frozen_duration = 3;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
  bytes parent_address = 16;
  repeated FreezeBalanceStage freezeBalanceStage = 17;

  int64 type = 18;  //if type=eth validate eth sign else validate vision sign  0 or null -> vision, 1 -> eth
  bytes rlp_data = 19; // eth's RLP rawData
}

message FreezeBalanceStage {
  int64 stage = 1;
  int64 frozen_balance = 2;
  bool refreeze = 3;
}

message UnfreezeBalanceContract {
  bytes owner_address = 1;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
  repeated int64 stages = 16;

  int64 type = 17;  //if type=eth validate eth sign else validate vision sign  0 or null -> vision, 1 -> eth
  bytes rlp_data = 18; // eth's RLP rawData
}

message WithdrawBalanceContract {
  enum WithdrawBalanceType {
    ALL = 0x00;
    SPREAD_MINT = 0x01;
  }

  bytes owner_address = 1;
  WithdrawBalanceType type = 2;

  int64 rlp_type = 3;  // if type=eth validate eth sign else validate vision sign  0 or null -> vision, 1 -> eth
  bytes rlp_data = 4;  // eth's RLP rawData
}

message TransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 amount = 3;
  int64 type = 4;  //if type=eth validate eth sign else validate vision sign  0 or null -> vision, 1 -> eth
  bytes rlp_data = 5; // eth's RLP rawData
}
message TransactionBalanceTrace {
  message Operation {
    int64 operation_identifier = 1;
    bytes address = 2;
    int64 amount = 3;
  }
  bytes transaction_identifier = 1;
  repeated Operation operation = 2;
  string type = 3;
  string status = 4;
}
message BlockBalanceTrace {
  message BlockIdentifier {
    bytes hash = 1;
    int64 number = 2;
  }
  BlockIdentifier block_identifier = 1;
  int64 timestamp = 2;
  repeated TransactionBalanceTrace transaction_balance_trace = 3;
//  BlockIdentifier parent_block_identifier = 4;
}
message AccountTrace {
  int64 balance = 1;
  int64 placeholder = 99;
}
message AccountIdentifier {
  bytes address = 1;
}
message AccountBalanceRequest {
  AccountIdentifier account_identifier = 1;
  BlockBalanceTrace.BlockIdentifier block_identifier = 2;
}
message AccountBalanceResponse {
  int64 balance = 1;
  BlockBalanceTrace.BlockIdentifier block_identifier = 2;
}
