description = "chainbase â€“ a decentralized database for blockchain."

// Dependency versions
// ---------------------------------------

def junitVersion = "4.12"
def mockitoVersion = "2.1.0"
def testNgVersion = "6.11"
def jacocoVersion = "0.8.0"
def leveldbVersion = "1.8"
def jansiVersion = "1.16"
// --------------------------------------

static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

if (isWindows()) {
    ext {
        leveldbGroup = "org.ethereum"
        leveldbName = "leveldbjni-all"
        leveldbVersion = "1.18.3"
    }
} else {
    ext {
        leveldbGroup = "org.fusesource.leveldbjni"
        leveldbName = "leveldbjni-all"
        leveldbVersion = "1.8"
    }
}

dependencies {
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    testImplementation "org.testng:testng:$testNgVersion"

    compile group: leveldbGroup, name: leveldbName, version: leveldbVersion
    compile "org.fusesource.jansi:jansi:$jansiVersion"
    compile group: 'org.rocksdb', name: 'rocksdbjni', version: '5.15.10'
    compile group: 'com.typesafe', name: 'config', version: '1.3.2'
    compile 'com.github.vision-consensus:zksnark-java-sdk:release-1.0.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'
    compile 'com.alibaba:fastjson:1.2.83'
    compile 'org.apache.kafka:kafka-clients:2.7.0'
    compile project(":vprotocol")
    compile project(":common")
    compile project(":crypto")
    compile 'org.reflections:reflections:0.9.11'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'org.eclipse.jetty:jetty-server:9.4.11.v20180605'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.11.v20180605'
}


test {

    testLogging {
        // showing skipped occasionally should prevent CI timeout due to lack of standard output
        events = ["skipped", "failed"] // "started", "passed"
        // showStandardStreams = true
        exceptionFormat = "full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat = "full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat = "full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat = "full"
    }

    maxHeapSize = "1200m"

    if (System.getenv("CI") == null) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

task testng(type: Test) {
    useTestNG()
    testLogging {
        events = ["skipped", "failed"]
        exceptionFormat = "full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat = "full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat = "full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat = "full"
    }
}

check.dependsOn testng

jacoco {
    toolVersion = jacocoVersion // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    executionData = files('../framework/build/jacoco/jacocoTest.exec')
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,)
        })
    }
}

build.dependsOn jacocoTestReport
