plugins {
    id "org.sonarqube" version "2.6"
}

apply plugin: 'application'
apply plugin: 'checkstyle'

mainClassName = 'org.vision.program.FullNode'

def versions = [
        checkstyle: '8.7',
]

jacoco {
    toolVersion = "0.8.1"
}


configurations {
    checkstyleConfig

}

configurations.getByName('checkstyleConfig') {
    transitive = false
}

static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

task version(type: Exec) {
    commandLine 'bash', '-c', '../ver.sh'
}

dependencies {
    //local libraries
    compile fileTree(dir: 'libs', include: '*.jar')
    // end local libraries
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '1.0.0.1'

    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

    compile "com.madgag.spongycastle:core:1.58.0.0"
    compile "com.madgag.spongycastle:prov:1.58.0.0"

    compile group: 'com.typesafe', name: 'config', version: '1.3.2'

    compile "com.cedarsoftware:java-util:1.8.0"

    compile group: 'com.beust', name: 'jcommander', version: '1.72'

    compile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'

    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'
    compile group: 'com.github.davidb', name: 'metrics-influxdb', version: '0.8.2'

    compile group: 'com.carrotsearch', name: 'java-sizeof', version: '0.0.5'

    compile 'org.aspectj:aspectjrt:1.8.13'
    compile 'org.aspectj:aspectjweaver:1.8.13'
    compile 'org.aspectj:aspectjtools:1.8.13'
    compile 'com.googlecode.cqengine:cqengine:2.12.4'
    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'

    // http
    compile 'org.eclipse.jetty:jetty-server:9.4.11.v20180605'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.11.v20180605'
    compile 'com.alibaba:fastjson:1.2.83'
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.1'
    // end http

    //jsonrpc4j
    compile('com.github.briandilley.jsonrpc4j:jsonrpc4j:1.6')
    compile group: 'javax.portlet', name: 'portlet-api', version: '2.0'

    compile "io.vavr:vavr:0.9.2"
    compile group: 'org.pf4j', name: 'pf4j', version: '2.5.0'

    compile group: 'org.zeromq', name: 'jeromq', version: '0.5.0'
    compile 'com.github.vision-consensus:zksnark-java-sdk:release-1.0.1'
    compile project(":chainstorage")
    compile project(":vprotocol")
    compile project(":executor")
    compile project(":consensus")
}

check.dependsOn 'lint'

checkstyle {
    toolVersion = "${versions.checkstyle}"
    configFile = file("config/checkstyle/checkStyleAll.xml")
}


checkstyleMain {
    source = 'src/main/java'
}

task lint(type: Checkstyle) {
    // Cleaning the old log because of the creation of the new ones (not sure if totaly needed)
    delete fileTree(dir: "${project.rootDir}/app/build/reports")
    source 'src'
    include '**/*.java'
    exclude 'main/gen/**'
    exclude 'test/**'
    // empty classpath
    classpath = files()
    //Failing the build
    ignoreFailures = false
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}

run {
    if (project.hasProperty('witness')) {
        standardInput = System.in
        args = ['--witness']
    }
}


test {
    testLogging {
        exceptionFormat = 'full'
    }
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    if (isWindows()) {
        exclude '**/ShieldedTransferActuatorTest.class'
        exclude '**/BackupDbUtilTest.class'
        exclude '**/ManagerTest.class'
        exclude 'org/vision/core/zksnark/**'
        exclude 'org/vision/common/runtime/vm/PrecompiledContractsVerifyProofTest.class'
        exclude 'org/vision/core/ShieldedVRC20BuilderTest.class'
        exclude 'org/vision/common/runtime/vm/WithdrawRewardTest.class'
    }
}

task stest(type: Test) {

    useTestNG {
        suites(file('src/test/resources/testng.xml'))
        parallel 'tests'
        threadCount 4

    }

    testLogging {
        exceptionFormat = 'full'
        showStackTraces = "true"
    }

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

task dailyBuild(type: Test) {
    useTestNG {
        suites(file('src/test/resources/daily-build.xml'))
        parallel 'tests'
        threadCount 1
    }
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    executionData = files('build/jacoco/jacocoTest.exec')
}

def binaryRelease(taskName, jarName, mainClass) {
    return tasks.create("${taskName}", Jar) {
        baseName = jarName
        version = null
        from(sourceSets.main.output) {
            include "/**"
        }

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes "Main-Class": "${mainClass}"
        }
//        classifier(jarName)
    }
}

def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        unixStartScriptGenerator.template = resources.text.fromFile('../gradle/unixStartScript.txt')
        windowsStartScriptGenerator.template = resources.text.fromFile('../gradle/windowsStartScript.txt')
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
//        defaultJvmOpts = ['-XX:+UseConcMarkSweepGC',
//                          '-XX:+PrintGCDetails',
//                          '-Xloggc:./gc.log',
//                          '-XX:+PrintGCDateStamps',
//                          '-XX:+CMSParallelRemarkEnabled',
//                          '-XX:ReservedCodeCacheSize=256m',
//                          '-XX:+CMSScavengeBeforeRemark'
//        ]
    }
    project.tasks[name].dependsOn(project.jar)
    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}

applicationDistribution.from("../gradle/vision-core.vmoptions") {
    into "bin"
}
//distZip {
//    doLast {
//        file("$destinationDir/$archiveName").renameTo("$destinationDir/"+'vision-core-'+version+'-bin.zip')
//    }
//}
configurations.archives.artifacts.removeAll { it.type == 'tar' }
applicationName = 'vision-core'
startScripts.enabled = false
run.enabled = false
tasks.distTar.enabled = false

createScript(project, 'org.vision.program.SolidityNode', 'SolidityNode')
createScript(project, 'org.vision.program.FullNode', 'FullNode')
createScript(project, 'org.vision.program.KeystoreFactory', 'KeystoreFactory')
createScript(project, 'org.vision.program.DBConvert', 'DBConvert')
createScript(project, 'org.vision.tool.litefullnode.LiteFullNodeTool', 'LiteFullNodeTool')

def releaseBinary = hasProperty('binaryRelease') ? getProperty('binaryRelease') : 'true'
if (releaseBinary == 'true') {
artifacts {
    archives(binaryRelease('buildSolidityNodeJar', 'SolidityNode', 'org.vision.program.SolidityNode'),
            binaryRelease('buildFullNodeJar', 'FullNode', 'org.vision.program.FullNode'),
            binaryRelease('buildKeystoreFactoryJar', 'KeystoreFactory', 'org.vision.program.KeystoreFactory'),
            binaryRelease('buildDBConvertJar', 'DBConvert', 'org.vision.program.DBConvert'),
            binaryRelease('buildLiteFullNodeToolJar', 'LiteFullNodeTool', 'org.vision.tool.litefullnode.LiteFullNodeTool'))
    }
}

task copyToParent(type: Copy) {
    into "../build/distributions"
    from "$buildDir/distributions"
    include "*.zip"
}

build.finalizedBy(copyToParent)